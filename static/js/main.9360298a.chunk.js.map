{"version":3,"sources":["components/ShoeCard/index.js","components/Navbar/index.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["ShoeCard","handleOnClick","props","click","id","className","alt","this","src","image","onClick","Component","Navbar","display","score","topScore","Footer","App","selectImage","console","log","state","correct","priorClick","setState","displayShoes","shuffleShoeCard","shoes","map","shoe","key","footer","i","length","j","Math","floor","random","temp","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gxCAGqBA,G,uNACjBC,cAAgB,WACZ,EAAKC,MAAMC,MAAO,EAAKD,MAAME,K,wEAI7B,OACQ,yBAAKC,UAAU,aACP,yBAAKC,IAAKC,KAAKL,MAAME,GAAII,IAAKD,KAAKL,MAAMO,MAAOC,QAASH,KAAKN,qB,GARhDU,c,OCgEvBC,G,uLA7DX,OAEE,yBAAKP,UAAU,UACb,yBAAKA,UAAU,wDAEb,yBAAKA,UAAU,cAAf,eAKA,yBAAKA,UAAU,cACZE,KAAKL,MAAMW,SAEd,yBAAKR,UAAU,cACZE,KAAKL,MAAMY,MADd,MACwBP,KAAKL,MAAMa,WAIvC,4BAAQV,UAAU,UACd,2CACA,8G,GAtBWM,cCMNK,G,MAPA,WACd,OACG,yBAAKX,UAAY,oBACf,gDAAqB,yBAAKA,UAAW,MAAMG,IAAK,kBAAhD,QCGeS,E,YACnB,WAAYf,GAAQ,IAAD,8BAEjB,4CAAMA,KAuBRgB,YAAc,SAACd,GACbe,QAAQC,IAAI,OAAQhB,IAEO,IAAvB,EAAKiB,MAAMC,SAAoB,EAAKD,MAAME,aAAenB,GAC3D,EAAKoB,SAAS,CAAEV,MAAO,EAAKO,MAAMP,MAAQ,IAC1C,EAAKU,SAAS,CAAEX,QAAS,8BAGzB,EAAKW,SAAS,CAAEX,QAAS,8BACzB,EAAKW,SAAS,CAAEV,MAAO,KAEzB,EAAKU,SAAS,CAAED,WAAYnB,KAED,IAAvB,EAAKiB,MAAMC,SAAoB,EAAKD,MAAMP,OAAS,EAAKO,MAAMN,UAChE,EAAKS,SAAS,CAAET,SAAU,EAAKM,MAAMP,MAAQ,KAvC9B,EA6CnBW,aAAe,WAEb,OADoB,EAAKC,gBAAgBC,GACnBC,KAAI,SAACC,GAAD,OACxB,kBAAC,EAAD,CAAUC,IAAKD,EAAKzB,GAAIA,GAAIyB,EAAKzB,GAAIK,MAAOoB,EAAKpB,MAAON,MAAO,EAAKe,kBA7CtE,EAAKG,MAAQ,CACXP,MAAO,EACPQ,SAAS,EACTT,QAAS,2BACTkB,OAAQ,eACRR,YAAa,EACbR,SAAU,GATK,E,6EAeHY,GACd,IAAK,IAAIK,EAAIL,EAAMM,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACzC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOX,EAAMK,GACnBL,EAAMK,GAAKL,EAAMO,GACjBP,EAAMO,GAAKI,EAEb,OAAOX,I,+BAoCP,OAJAR,QAAQC,IAAI,UAAWb,KAAKc,MAAMP,OAClCK,QAAQC,IAAKJ,GAIX,6BACE,kBAAC,EAAD,CAAQF,MAAOP,KAAKc,MAAMP,MAAOC,SAAUR,KAAKc,MAAMN,SAAUF,QAASN,KAAKc,MAAMR,UACpF,yBAAKR,UAAU,kBAAf,IAAkCE,KAAKkB,gBAEvC,kBAAC,EAAD,W,GAhEyBd,aCGb4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9360298a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './style.css';\r\n\r\nexport default class ShoeCard extends Component {\r\n    handleOnClick = () => {\r\n        this.props.click (this.props.id)\r\n    }\r\n    //set it up so function will run when pictures are clicked on\r\n    render() {\r\n        return (\r\n                <div className='grid-item'>\r\n                        <img alt={this.props.id} src={this.props.image} onClick={this.handleOnClick} />\r\n    \r\n                </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import './style.css';\r\n\r\n// //set it up so function will run when pictures are clicked on\r\n// function ShoeCard(props) {\r\n//     return (\r\n// <div className='card'>\r\n//     <div className = 'img-container' onClick={()=>{props.gymShoe(props.id)}} scores={props.scores}/>\r\n//     <img alt={props.id}src = {props.image}/>\r\n// </div>\r\n// )};\r\n\r\n\r\n\r\n//    export default Navbar;","import React, { Component } from 'react'\r\nimport './style.css'\r\n// import Navbar from 'navbar-react'\r\n\r\nclass Navbar extends Component {\r\n  render() {\r\n    return (\r\n\r\n      <div className='parent'>\r\n        <nav className=\"navbar navbar-expand-large navbar-black bg-black p-0\">\r\n\r\n          <div className='navelement'>\r\n\r\n            Clicky Game\r\n          </div>\r\n\r\n          <div className='navelement'>\r\n            {this.props.display}\r\n          </div>\r\n          <div className='navelement'>\r\n            {this.props.score} | {this.props.topScore}\r\n\r\n          </div>\r\n        </nav>\r\n      <header className='child1'>\r\n          <h1>Clicky Game</h1>\r\n          <h2> Click on an image to earn points but don't click on any more than once!</h2>\r\n\r\n        </header>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n/* <ul>\r\n  <li className=\"brand\">\r\n    <a ref=\"/\">Clicky Game</a>\r\n  </li>\r\n  <li>\r\n   {this.props.score} \r\n  </li>\r\n  <li className=\"\">{this.props.display}!</li>\r\n  <a className=\"nav-link\" href=\"#\">Features</a>\r\n</ul>\r\n</nav > */\r\n\r\n\r\n\r\n\r\n\r\n\r\n// /* {<nav class=\"navbar\">\r\n//     <ul>\r\n//       <li class=\"brand\">\r\n//         <a ref=\"/\">Clicky Game</a>\r\n//       </li>\r\n//       <li class=\"\">You Guessed Correctly!</li>\r\n//         <a class=\"nav-link\" href=\"#\">Features</a>\r\n//       <li>\r\n\r\n//       \"Score\"\r\n//       \"4\"\r\n//       \" |Top Score: \"\r\n//       \"4\"\r\n//       </li>\r\n//       </ul>\r\n//       </nav>*/\r\nexport default Navbar;","import React, { Component } from 'react'\r\nimport './style.css'\r\n\r\nconst Footer = () => {\r\n\treturn (\r\n    <div className = \"footer-container\">\r\n      <footer>Clicky Game! <img className= \"pic\" src= './logo192.png'/> </footer>\r\n      </div>\r\n    )\r\n}\r\nexport default Footer;\r\n","\nimport React, { Component } from 'react';\nimport './App.css';\nimport ShoeCard from './components/ShoeCard';\nimport shoes from './shoes.json';\nimport Navbar from './components/Navbar';\nimport Footer from './components/Footer';\n\n\nexport default class App extends Component {\n  constructor(props) {\n\n    super(props);\n    this.state = {\n      score: 0,\n      correct: true,\n      display: \"Click an image to begin!\",\n      footer: \"Clicky Game!\",\n      priorClick: -1,\n      topScore: 0,\n\n    }\n  }\n\n\n  shuffleShoeCard(shoes) {\n    for (let i = shoes.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = shoes[i];\n      shoes[i] = shoes[j];\n      shoes[j] = temp;\n    }\n    return shoes;\n  }\n\n  selectImage = (id) => {\n    console.log(\"id: \", id);\n\n    if (this.state.correct === true && this.state.priorClick !== id) {\n      this.setState({ score: this.state.score + 1 });\n      this.setState({ display: \" You Guessed Correctly!\" });\n    }\n    else {\n      this.setState({ display: \" You Guessed Incorrectly!\" });\n      this.setState({ score: 0 });\n    }\n    this.setState({ priorClick: id });\n\n    if (this.state.correct === true && this.state.score >= this.state.topScore) {\n      this.setState({ topScore: this.state.score + 1 });\n\n    }\n  };\n\n\n  displayShoes = () => {\n    let shuffledshoes = this.shuffleShoeCard(shoes)\n    return (shuffledshoes.map((shoe) => (\n      <ShoeCard key={shoe.id} id={shoe.id} image={shoe.image} click={this.selectImage}></ShoeCard>)\n\n    ));\n  }\n\n  render() {\n    console.log(\"score: \", this.state.score);\n    console.log (Footer);\n\n\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} display={this.state.display}></Navbar>\n        <div className='grid-container'> {this.displayShoes()}\n        </div>\n        <Footer />\n      </div>\n    )\n\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}